// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/JailtonJunior94/devkit-go/pkg/o11y"
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// NewSpan creates a new instance of Span. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpan(t interface {
	mock.TestingT
	Cleanup(func())
}) *Span {
	mock := &Span{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Span is an autogenerated mock type for the Span type
type Span struct {
	mock.Mock
}

type Span_Expecter struct {
	mock *mock.Mock
}

func (_m *Span) EXPECT() *Span_Expecter {
	return &Span_Expecter{mock: &_m.Mock}
}

// AddAttributes provides a mock function for the type Span
func (_mock *Span) AddAttributes(ctx context.Context, code o11y.Code, description string, attrs ...o11y.Attributes) {
	// o11y.Attributes
	_va := make([]interface{}, len(attrs))
	for _i := range attrs {
		_va[_i] = attrs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, code, description)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// Span_AddAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAttributes'
type Span_AddAttributes_Call struct {
	*mock.Call
}

// AddAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - code o11y.Code
//   - description string
//   - attrs ...o11y.Attributes
func (_e *Span_Expecter) AddAttributes(ctx interface{}, code interface{}, description interface{}, attrs ...interface{}) *Span_AddAttributes_Call {
	return &Span_AddAttributes_Call{Call: _e.mock.On("AddAttributes",
		append([]interface{}{ctx, code, description}, attrs...)...)}
}

func (_c *Span_AddAttributes_Call) Run(run func(ctx context.Context, code o11y.Code, description string, attrs ...o11y.Attributes)) *Span_AddAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 o11y.Code
		if args[1] != nil {
			arg1 = args[1].(o11y.Code)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []o11y.Attributes
		variadicArgs := make([]o11y.Attributes, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(o11y.Attributes)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *Span_AddAttributes_Call) Return() *Span_AddAttributes_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_AddAttributes_Call) RunAndReturn(run func(ctx context.Context, code o11y.Code, description string, attrs ...o11y.Attributes)) *Span_AddAttributes_Call {
	_c.Run(run)
	return _c
}

// AddEvent provides a mock function for the type Span
func (_mock *Span) AddEvent(name string, options ...trace.EventOption) {
	// trace.EventOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// Span_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type Span_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - name string
//   - options ...trace.EventOption
func (_e *Span_Expecter) AddEvent(name interface{}, options ...interface{}) *Span_AddEvent_Call {
	return &Span_AddEvent_Call{Call: _e.mock.On("AddEvent",
		append([]interface{}{name}, options...)...)}
}

func (_c *Span_AddEvent_Call) Run(run func(name string, options ...trace.EventOption)) *Span_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []trace.EventOption
		variadicArgs := make([]trace.EventOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.EventOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Span_AddEvent_Call) Return() *Span_AddEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_AddEvent_Call) RunAndReturn(run func(name string, options ...trace.EventOption)) *Span_AddEvent_Call {
	_c.Run(run)
	return _c
}

// AddLink provides a mock function for the type Span
func (_mock *Span) AddLink(link trace.Link) {
	_mock.Called(link)
	return
}

// Span_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type Span_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - link trace.Link
func (_e *Span_Expecter) AddLink(link interface{}) *Span_AddLink_Call {
	return &Span_AddLink_Call{Call: _e.mock.On("AddLink", link)}
}

func (_c *Span_AddLink_Call) Run(run func(link trace.Link)) *Span_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 trace.Link
		if args[0] != nil {
			arg0 = args[0].(trace.Link)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Span_AddLink_Call) Return() *Span_AddLink_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_AddLink_Call) RunAndReturn(run func(link trace.Link)) *Span_AddLink_Call {
	_c.Run(run)
	return _c
}

// AddStatus provides a mock function for the type Span
func (_mock *Span) AddStatus(ctx context.Context, code o11y.Code, description string) {
	_mock.Called(ctx, code, description)
	return
}

// Span_AddStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStatus'
type Span_AddStatus_Call struct {
	*mock.Call
}

// AddStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - code o11y.Code
//   - description string
func (_e *Span_Expecter) AddStatus(ctx interface{}, code interface{}, description interface{}) *Span_AddStatus_Call {
	return &Span_AddStatus_Call{Call: _e.mock.On("AddStatus", ctx, code, description)}
}

func (_c *Span_AddStatus_Call) Run(run func(ctx context.Context, code o11y.Code, description string)) *Span_AddStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 o11y.Code
		if args[1] != nil {
			arg1 = args[1].(o11y.Code)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Span_AddStatus_Call) Return() *Span_AddStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_AddStatus_Call) RunAndReturn(run func(ctx context.Context, code o11y.Code, description string)) *Span_AddStatus_Call {
	_c.Run(run)
	return _c
}

// End provides a mock function for the type Span
func (_mock *Span) End(options ...trace.SpanEndOption) {
	// trace.SpanEndOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// Span_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type Span_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
//   - options ...trace.SpanEndOption
func (_e *Span_Expecter) End(options ...interface{}) *Span_End_Call {
	return &Span_End_Call{Call: _e.mock.On("End",
		append([]interface{}{}, options...)...)}
}

func (_c *Span_End_Call) Run(run func(options ...trace.SpanEndOption)) *Span_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []trace.SpanEndOption
		variadicArgs := make([]trace.SpanEndOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanEndOption)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Span_End_Call) Return() *Span_End_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_End_Call) RunAndReturn(run func(options ...trace.SpanEndOption)) *Span_End_Call {
	_c.Run(run)
	return _c
}

// IsRecording provides a mock function for the type Span
func (_mock *Span) IsRecording() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRecording")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Span_IsRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRecording'
type Span_IsRecording_Call struct {
	*mock.Call
}

// IsRecording is a helper method to define mock.On call
func (_e *Span_Expecter) IsRecording() *Span_IsRecording_Call {
	return &Span_IsRecording_Call{Call: _e.mock.On("IsRecording")}
}

func (_c *Span_IsRecording_Call) Run(run func()) *Span_IsRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Span_IsRecording_Call) Return(b bool) *Span_IsRecording_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Span_IsRecording_Call) RunAndReturn(run func() bool) *Span_IsRecording_Call {
	_c.Call.Return(run)
	return _c
}

// RecordError provides a mock function for the type Span
func (_mock *Span) RecordError(err error, options ...trace.EventOption) {
	// trace.EventOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// Span_RecordError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordError'
type Span_RecordError_Call struct {
	*mock.Call
}

// RecordError is a helper method to define mock.On call
//   - err error
//   - options ...trace.EventOption
func (_e *Span_Expecter) RecordError(err interface{}, options ...interface{}) *Span_RecordError_Call {
	return &Span_RecordError_Call{Call: _e.mock.On("RecordError",
		append([]interface{}{err}, options...)...)}
}

func (_c *Span_RecordError_Call) Run(run func(err error, options ...trace.EventOption)) *Span_RecordError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		var arg1 []trace.EventOption
		variadicArgs := make([]trace.EventOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.EventOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Span_RecordError_Call) Return() *Span_RecordError_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_RecordError_Call) RunAndReturn(run func(err error, options ...trace.EventOption)) *Span_RecordError_Call {
	_c.Run(run)
	return _c
}

// SetAttributes provides a mock function for the type Span
func (_mock *Span) SetAttributes(kv ...attribute.KeyValue) {
	// attribute.KeyValue
	_va := make([]interface{}, len(kv))
	for _i := range kv {
		_va[_i] = kv[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// Span_SetAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAttributes'
type Span_SetAttributes_Call struct {
	*mock.Call
}

// SetAttributes is a helper method to define mock.On call
//   - kv ...attribute.KeyValue
func (_e *Span_Expecter) SetAttributes(kv ...interface{}) *Span_SetAttributes_Call {
	return &Span_SetAttributes_Call{Call: _e.mock.On("SetAttributes",
		append([]interface{}{}, kv...)...)}
}

func (_c *Span_SetAttributes_Call) Run(run func(kv ...attribute.KeyValue)) *Span_SetAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []attribute.KeyValue
		variadicArgs := make([]attribute.KeyValue, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(attribute.KeyValue)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Span_SetAttributes_Call) Return() *Span_SetAttributes_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_SetAttributes_Call) RunAndReturn(run func(kv ...attribute.KeyValue)) *Span_SetAttributes_Call {
	_c.Run(run)
	return _c
}

// SetName provides a mock function for the type Span
func (_mock *Span) SetName(name string) {
	_mock.Called(name)
	return
}

// Span_SetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetName'
type Span_SetName_Call struct {
	*mock.Call
}

// SetName is a helper method to define mock.On call
//   - name string
func (_e *Span_Expecter) SetName(name interface{}) *Span_SetName_Call {
	return &Span_SetName_Call{Call: _e.mock.On("SetName", name)}
}

func (_c *Span_SetName_Call) Run(run func(name string)) *Span_SetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Span_SetName_Call) Return() *Span_SetName_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_SetName_Call) RunAndReturn(run func(name string)) *Span_SetName_Call {
	_c.Run(run)
	return _c
}

// SetStatus provides a mock function for the type Span
func (_mock *Span) SetStatus(code codes.Code, description string) {
	_mock.Called(code, description)
	return
}

// Span_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type Span_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - code codes.Code
//   - description string
func (_e *Span_Expecter) SetStatus(code interface{}, description interface{}) *Span_SetStatus_Call {
	return &Span_SetStatus_Call{Call: _e.mock.On("SetStatus", code, description)}
}

func (_c *Span_SetStatus_Call) Run(run func(code codes.Code, description string)) *Span_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 codes.Code
		if args[0] != nil {
			arg0 = args[0].(codes.Code)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Span_SetStatus_Call) Return() *Span_SetStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_SetStatus_Call) RunAndReturn(run func(code codes.Code, description string)) *Span_SetStatus_Call {
	_c.Run(run)
	return _c
}

// SpanContext provides a mock function for the type Span
func (_mock *Span) SpanContext() trace.SpanContext {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SpanContext")
	}

	var r0 trace.SpanContext
	if returnFunc, ok := ret.Get(0).(func() trace.SpanContext); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(trace.SpanContext)
	}
	return r0
}

// Span_SpanContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpanContext'
type Span_SpanContext_Call struct {
	*mock.Call
}

// SpanContext is a helper method to define mock.On call
func (_e *Span_Expecter) SpanContext() *Span_SpanContext_Call {
	return &Span_SpanContext_Call{Call: _e.mock.On("SpanContext")}
}

func (_c *Span_SpanContext_Call) Run(run func()) *Span_SpanContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Span_SpanContext_Call) Return(spanContext trace.SpanContext) *Span_SpanContext_Call {
	_c.Call.Return(spanContext)
	return _c
}

func (_c *Span_SpanContext_Call) RunAndReturn(run func() trace.SpanContext) *Span_SpanContext_Call {
	_c.Call.Return(run)
	return _c
}

// TracerProvider provides a mock function for the type Span
func (_mock *Span) TracerProvider() trace.TracerProvider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TracerProvider")
	}

	var r0 trace.TracerProvider
	if returnFunc, ok := ret.Get(0).(func() trace.TracerProvider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.TracerProvider)
		}
	}
	return r0
}

// Span_TracerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracerProvider'
type Span_TracerProvider_Call struct {
	*mock.Call
}

// TracerProvider is a helper method to define mock.On call
func (_e *Span_Expecter) TracerProvider() *Span_TracerProvider_Call {
	return &Span_TracerProvider_Call{Call: _e.mock.On("TracerProvider")}
}

func (_c *Span_TracerProvider_Call) Run(run func()) *Span_TracerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Span_TracerProvider_Call) Return(tracerProvider trace.TracerProvider) *Span_TracerProvider_Call {
	_c.Call.Return(tracerProvider)
	return _c
}

func (_c *Span_TracerProvider_Call) RunAndReturn(run func() trace.TracerProvider) *Span_TracerProvider_Call {
	_c.Call.Return(run)
	return _c
}

// span provides a mock function for the type Span
func (_mock *Span) span() {
	_mock.Called()
	return
}

// Span_span_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'span'
type Span_span_Call struct {
	*mock.Call
}

// span is a helper method to define mock.On call
func (_e *Span_Expecter) span() *Span_span_Call {
	return &Span_span_Call{Call: _e.mock.On("span")}
}

func (_c *Span_span_Call) Run(run func()) *Span_span_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Span_span_Call) Return() *Span_span_Call {
	_c.Call.Return()
	return _c
}

func (_c *Span_span_Call) RunAndReturn(run func()) *Span_span_Call {
	_c.Run(run)
	return _c
}
