// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"log/slog"

	"github.com/JailtonJunior94/devkit-go/pkg/o11y"
	mock "github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/metric"
	metric0 "go.opentelemetry.io/otel/sdk/metric"
	trace0 "go.opentelemetry.io/otel/sdk/trace"
	"go.opentelemetry.io/otel/trace"
)

// NewObservability creates a new instance of Observability. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObservability(t interface {
	mock.TestingT
	Cleanup(func())
}) *Observability {
	mock := &Observability{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Observability is an autogenerated mock type for the Observability type
type Observability struct {
	mock.Mock
}

type Observability_Expecter struct {
	mock *mock.Mock
}

func (_m *Observability) EXPECT() *Observability_Expecter {
	return &Observability_Expecter{mock: &_m.Mock}
}

// LoggerProvider provides a mock function for the type Observability
func (_mock *Observability) LoggerProvider() *slog.Logger {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoggerProvider")
	}

	var r0 *slog.Logger
	if returnFunc, ok := ret.Get(0).(func() *slog.Logger); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}
	return r0
}

// Observability_LoggerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoggerProvider'
type Observability_LoggerProvider_Call struct {
	*mock.Call
}

// LoggerProvider is a helper method to define mock.On call
func (_e *Observability_Expecter) LoggerProvider() *Observability_LoggerProvider_Call {
	return &Observability_LoggerProvider_Call{Call: _e.mock.On("LoggerProvider")}
}

func (_c *Observability_LoggerProvider_Call) Run(run func()) *Observability_LoggerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Observability_LoggerProvider_Call) Return(logger *slog.Logger) *Observability_LoggerProvider_Call {
	_c.Call.Return(logger)
	return _c
}

func (_c *Observability_LoggerProvider_Call) RunAndReturn(run func() *slog.Logger) *Observability_LoggerProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Meter provides a mock function for the type Observability
func (_mock *Observability) Meter() metric.Meter {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Meter")
	}

	var r0 metric.Meter
	if returnFunc, ok := ret.Get(0).(func() metric.Meter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metric.Meter)
		}
	}
	return r0
}

// Observability_Meter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Meter'
type Observability_Meter_Call struct {
	*mock.Call
}

// Meter is a helper method to define mock.On call
func (_e *Observability_Expecter) Meter() *Observability_Meter_Call {
	return &Observability_Meter_Call{Call: _e.mock.On("Meter")}
}

func (_c *Observability_Meter_Call) Run(run func()) *Observability_Meter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Observability_Meter_Call) Return(meter metric.Meter) *Observability_Meter_Call {
	_c.Call.Return(meter)
	return _c
}

func (_c *Observability_Meter_Call) RunAndReturn(run func() metric.Meter) *Observability_Meter_Call {
	_c.Call.Return(run)
	return _c
}

// MeterProvider provides a mock function for the type Observability
func (_mock *Observability) MeterProvider() *metric0.MeterProvider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MeterProvider")
	}

	var r0 *metric0.MeterProvider
	if returnFunc, ok := ret.Get(0).(func() *metric0.MeterProvider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metric0.MeterProvider)
		}
	}
	return r0
}

// Observability_MeterProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MeterProvider'
type Observability_MeterProvider_Call struct {
	*mock.Call
}

// MeterProvider is a helper method to define mock.On call
func (_e *Observability_Expecter) MeterProvider() *Observability_MeterProvider_Call {
	return &Observability_MeterProvider_Call{Call: _e.mock.On("MeterProvider")}
}

func (_c *Observability_MeterProvider_Call) Run(run func()) *Observability_MeterProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Observability_MeterProvider_Call) Return(meterProvider *metric0.MeterProvider) *Observability_MeterProvider_Call {
	_c.Call.Return(meterProvider)
	return _c
}

func (_c *Observability_MeterProvider_Call) RunAndReturn(run func() *metric0.MeterProvider) *Observability_MeterProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type Observability
func (_mock *Observability) Start(ctx context.Context, name string, opts ...trace.SpanStartOption) (context.Context, o11y.Span) {
	// trace.SpanStartOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 context.Context
	var r1 o11y.Span
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...trace.SpanStartOption) (context.Context, o11y.Span)); ok {
		return returnFunc(ctx, name, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...trace.SpanStartOption) context.Context); ok {
		r0 = returnFunc(ctx, name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...trace.SpanStartOption) o11y.Span); ok {
		r1 = returnFunc(ctx, name, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(o11y.Span)
		}
	}
	return r0, r1
}

// Observability_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Observability_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts ...trace.SpanStartOption
func (_e *Observability_Expecter) Start(ctx interface{}, name interface{}, opts ...interface{}) *Observability_Start_Call {
	return &Observability_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{ctx, name}, opts...)...)}
}

func (_c *Observability_Start_Call) Run(run func(ctx context.Context, name string, opts ...trace.SpanStartOption)) *Observability_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []trace.SpanStartOption
		variadicArgs := make([]trace.SpanStartOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Observability_Start_Call) Return(context1 context.Context, span o11y.Span) *Observability_Start_Call {
	_c.Call.Return(context1, span)
	return _c
}

func (_c *Observability_Start_Call) RunAndReturn(run func(ctx context.Context, name string, opts ...trace.SpanStartOption) (context.Context, o11y.Span)) *Observability_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Tracer provides a mock function for the type Observability
func (_mock *Observability) Tracer() trace.Tracer {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tracer")
	}

	var r0 trace.Tracer
	if returnFunc, ok := ret.Get(0).(func() trace.Tracer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}
	return r0
}

// Observability_Tracer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tracer'
type Observability_Tracer_Call struct {
	*mock.Call
}

// Tracer is a helper method to define mock.On call
func (_e *Observability_Expecter) Tracer() *Observability_Tracer_Call {
	return &Observability_Tracer_Call{Call: _e.mock.On("Tracer")}
}

func (_c *Observability_Tracer_Call) Run(run func()) *Observability_Tracer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Observability_Tracer_Call) Return(tracer trace.Tracer) *Observability_Tracer_Call {
	_c.Call.Return(tracer)
	return _c
}

func (_c *Observability_Tracer_Call) RunAndReturn(run func() trace.Tracer) *Observability_Tracer_Call {
	_c.Call.Return(run)
	return _c
}

// TracerProvider provides a mock function for the type Observability
func (_mock *Observability) TracerProvider() *trace0.TracerProvider {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TracerProvider")
	}

	var r0 *trace0.TracerProvider
	if returnFunc, ok := ret.Get(0).(func() *trace0.TracerProvider); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*trace0.TracerProvider)
		}
	}
	return r0
}

// Observability_TracerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracerProvider'
type Observability_TracerProvider_Call struct {
	*mock.Call
}

// TracerProvider is a helper method to define mock.On call
func (_e *Observability_Expecter) TracerProvider() *Observability_TracerProvider_Call {
	return &Observability_TracerProvider_Call{Call: _e.mock.On("TracerProvider")}
}

func (_c *Observability_TracerProvider_Call) Run(run func()) *Observability_TracerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Observability_TracerProvider_Call) Return(tracerProvider *trace0.TracerProvider) *Observability_TracerProvider_Call {
	_c.Call.Return(tracerProvider)
	return _c
}

func (_c *Observability_TracerProvider_Call) RunAndReturn(run func() *trace0.TracerProvider) *Observability_TracerProvider_Call {
	_c.Call.Return(run)
	return _c
}
